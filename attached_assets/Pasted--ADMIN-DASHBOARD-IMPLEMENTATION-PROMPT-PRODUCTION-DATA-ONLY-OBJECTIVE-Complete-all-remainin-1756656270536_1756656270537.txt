

# ADMIN DASHBOARD IMPLEMENTATION PROMPT - PRODUCTION DATA ONLY

## OBJECTIVE
Complete all remaining admin dashboard functionality using **exclusively real production data**. No mock data, demo data, or hardcoded values permitted. All features must integrate with live backend systems and production databases.

## CRITICAL IMPLEMENTATION REQUIREMENTS

### 1. SUBSCRIPTION MANAGEMENT - PRODUCTION INTEGRATION
**Implement real Stripe integration:**
```typescript
// Replace stub implementation with actual Stripe API calls
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

// REAL subscription cancellation
export async function cancelSubscription(subscriptionId: string) {
  await stripe.subscriptions.update(subscriptionId, { cancel_at_period_end: true });
  // Update database with real status change
  await db.update(subscriptions).set({ status: 'cancelled' }).where(eq(subscriptions.id, subscriptionId));
}

// REAL refund processing
export async function processRefund(paymentIntentId: string, amount: number) {
  await stripe.refunds.create({ payment_intent: paymentIntentId, amount });
  // Log real transaction in production database
  await db.insert(refunds).values({ paymentIntentId, amount, timestamp: new Date() });
}
```

**Requirements:**
- Connect to live Stripe API using production keys
- Update production database with all status changes
- Implement webhook handlers for real Stripe events
- Display actual payment history from Stripe transactions
- Show real subscription metrics from production user data

### 2. ANALYTICS & REPORTING - PRODUCTION DATA SOURCES
**Implement real geographic data:**
```typescript
// Get actual user locations from production database
export async function getGeographicData() {
  const users = await db.select().from(users).where(eq(users.status, 'active'));
  
  // Use real IP geolocation data from user records
  const locationData = await Promise.all(
    users.map(async (user) => {
      const location = await getRealLocationData(user.ipAddress); // Real geolocation service
      return { country: location.country, city: location.city };
    })
  );
  
  return aggregateByRegion(locationData); // Real aggregation
}
```

**Implement real cohort analysis:**
```typescript
// Analyze actual user behavior from production activity logs
export async function getCohortAnalysis() {
  const userActions = await db.select().from(userActivities)
    .where(gte(userActions.timestamp, subMonths(new Date(), 6)));
  
  return calculateRealCohorts(userActions); // Real calculation from live data
}
```

**Requirements:**
- Use actual user IP addresses for geolocation
- Calculate metrics from real user activity logs
- Display live revenue data from Stripe transactions
- Show actual conversion funnels from production user journeys
- Update analytics in real-time as new production data arrives

### 3. API AUTHENTICATION - PRODUCTION SECURITY
**Implement secure admin authentication:**
```typescript
// Production admin authentication middleware
export async function requireAdmin(req: Request) {
  const sessionToken = req.headers.get('Authorization');
  
  // Verify against real admin sessions in production database
  const adminSession = await db.select().from(adminSessions)
    .where(and(
      eq(adminSessions.token, sessionToken),
      gt(adminSessions.expiresAt, new Date())
    ));
    
  if (!adminSession.length) {
    throw new Error('Unauthorized');
  }
  
  return adminSession[0];
}
```

**Requirements:**
- Use production admin credentials from database
- Implement JWT with production secret keys
- Verify permissions against real admin roles
- Log all admin actions to production audit tables
- Provide secure API testing method with real admin credentials

### 4. TYPE SAFETY - PRODUCTION INTERFACES
**Implement proper TypeScript interfaces:**
```typescript
// Production interfaces based on real database schema
interface SubscriptionStats {
  activeSubscriptions: number; // From real subscription count
  monthlyRevenue: number;      // From actual Stripe revenue
  churnRate: number;           // Calculated from real cancellation data
  conversionRate: number;      // From real user upgrade events
}

interface PaymentRecord {
  id: string;                  // Real Stripe payment ID
  amount: number;              // Actual transaction amount
  status: string;              // Live status from Stripe
  timestamp: Date;             // Real transaction time
}
```

**Requirements:**
- Define interfaces matching production database schema
- Type all API responses with real data structures
- Validate all inputs against production data constraints
- Ensure type safety across all admin dashboard components

## TESTING REQUIREMENTS - PRODUCTION VERIFICATION

Provide testing instructions using **exclusively production data**:

1. **Subscription Management Test:**
   - Use real Stripe test credentials in production environment
   - Cancel actual test subscription and verify status change
   - Process real refund and confirm database update
   - Verify payment history shows actual Stripe transactions

2. **Analytics Verification:**
   - Compare dashboard metrics with direct database queries:
     ```sql
     -- Verify revenue matches
     SELECT SUM(amount) FROM revenue_events WHERE date >= '2023-01-01';
     
     -- Verify user counts
     SELECT status, COUNT(*) FROM users GROUP BY status;
     ```
   - Confirm geographic data matches real user locations
   - Validate cohort analysis against actual user behavior logs

3. **Authentication Test:**
   - Use real admin credentials from production database
   - Verify API access with production session tokens
   - Confirm audit logs show real admin actions

## DELIVERABLES

1. **Production Implementation:**
   - All code using real production data sources
   - Live Stripe integration with production endpoints
   - Real database queries (no stubs or mock data)
   - Production-ready authentication system

2. **Verification Evidence:**
   - Screenshots showing real data in dashboard
   - Database query results matching dashboard displays
   - Stripe API call logs showing real transactions
   - Audit logs from actual admin actions

3. **Testing Documentation:**
   - Step-by-step production testing guide
   - Sample production data for verification
   - Methods to validate data accuracy
   - Security verification checklist

## PRODUCTION READINESS CHECKLIST

- [ ] All data sources are production databases/services
- [ ] No hardcoded values or mock data in any component
- [ ] Real Stripe integration with production keys
- [ ] Actual user data from production database
- [ ] Live authentication with production admin credentials
- [ ] Real-time updates from production data streams
- [ ] Production-level error handling and logging
- [ ] Security measures for production environment

**IMPLEMENTATION NOTE:** Every feature must use exclusively live production data. Any component using mock, demo, or hardcoded data will be rejected. Verify all implementations against actual production databases and services before delivery.