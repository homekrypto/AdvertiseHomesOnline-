

# PROMPT: IMPLEMENT STRIPE PRICE CREATION VIA API

## OBJECTIVE
Create a solution to programmatically generate the required Stripe prices using the Stripe API, eliminating the need for manual dashboard creation. This will complete the subscription system configuration.

## BACKGROUND
The system is fully functional except for missing Stripe price IDs. Instead of manually creating 6 prices in the Stripe dashboard, implement an automated solution using the Stripe API to create these prices programmatically.

## REQUIRED STRIPE PRICES TO CREATE
| Tier | Price ID | Amount | Billing Cycle |
|------|----------|--------|---------------|
| Agent | `price_agent_monthly` | $49.00 USD | Monthly recurring |
| Agent | `price_agent_annual` | $470.40 USD | Yearly recurring |
| Agency | `price_agency_monthly` | $99.00 USD | Monthly recurring |
| Agency | `price_agency_annual` | $950.40 USD | Yearly recurring |
| Expert | `price_expert_monthly` | $299.00 USD | Monthly recurring |
| Expert | `price_expert_annual` | $2,870.40 USD | Yearly recurring |

## IMPLEMENTATION OPTIONS

### Option 1: One-Time Script (Preferred)
Create a script that can be executed once to create all required prices:
- **File:** `create-stripe-prices.js`
- **Execution:** Run via Node.js
- **Output:** Confirmation of created prices with IDs
- **Database Update:** Update subscriptionPlans table with new price IDs

### Option 2: Admin Endpoint
Create an admin endpoint that can be triggered to create prices:
- **Endpoint:** `POST /api/admin/create-stripe-prices`
- **Authentication:** Require admin privileges
- **Security:** Protect against accidental multiple executions
- **Output:** JSON response with created price details

## IMPLEMENTATION REQUIREMENTS

### 1. Stripe API Integration
- Use production Stripe secret key (already configured)
- Implement error handling for API failures
- Include proper logging of all operations
- Handle potential duplicate price ID scenarios

### 2. Database Integration
- After creating each price in Stripe, update subscriptionPlans table
- Store both monthly and annual price IDs for each tier
- Verify database updates before and after
- Handle any database conflicts gracefully

### 3. Error Handling
- Validate Stripe API responses
- Handle network timeouts or failures
- Provide clear error messages for troubleshooting
- Implement rollback mechanism if partial creation fails

### 4. Security Considerations
- Ensure only authorized users can trigger price creation
- Protect against CSRF if using web endpoint
- Validate all input parameters
- Log all actions for audit trail

## TECHNICAL IMPLEMENTATION

### Option 1: Script Implementation
```javascript
// create-stripe-prices.js
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
const { db } = require('./server/storage');

const prices = [
  { tier: 'agent', interval: 'monthly', amount: 4900, id: 'price_agent_monthly' },
  { tier: 'agent', interval: 'yearly', amount: 47040, id: 'price_agent_annual' },
  { tier: 'agency', interval: 'monthly', amount: 9900, id: 'price_agency_monthly' },
  { tier: 'agency', interval: 'yearly', amount: 95040, id: 'price_agency_annual' },
  { tier: 'expert', interval: 'monthly', amount: 29900, id: 'price_expert_monthly' },
  { tier: 'expert', interval: 'yearly', amount: 287040, id: 'price_expert_annual' }
];

async function createPrices() {
  console.log('Creating Stripe prices...');
  
  for (const price of prices) {
    try {
      // Create product if needed
      let product;
      const existingProducts = await stripe.products.list({ active: true });
      product = existingProducts.data.find(p => p.name === `${price.tier} Subscription`);
      
      if (!product) {
        product = await stripe.products.create({
          name: `${price.tier} Subscription`,
          active: true
        });
      }
      
      // Create price
      const stripePrice = await stripe.prices.create({
        unit_amount: price.amount,
        currency: 'usd',
        recurring: { interval: price.interval },
        product: product.id,
        lookup_key: price.id
      });
      
      console.log(`Created price: ${price.id} - ${price.amount/100} USD/${price.interval}`);
      
      // Update database
      await db.update(subscriptionPlans)
        .set({
          [`stripe_price_id`]: price.id,
          [`price`]: price.amount / 100
        })
        .where(eq(subscriptionPlans.name, price.tier));
        
    } catch (error) {
      console.error(`Error creating price ${price.id}:`, error.message);
    }
  }
  
  console.log('Stripe prices creation complete!');
}

createPrices();
```

### Option 2: Endpoint Implementation
```typescript
// server/routes.ts
app.post('/api/admin/create-stripe-prices', requireAdmin, async (req, res) => {
  try {
    const prices = [/* same price array as above */];
    const results = [];
    
    for (const price of prices) {
      // Similar creation logic as script
      // Push results to array
    }
    
    res.json({
      success: true,
      message: 'Stripe prices created successfully',
      prices: results
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Error creating Stripe prices',
      error: error.message
    });
  }
});
```

## TESTING REQUIREMENTS

### 1. Script Testing
- Execute script in production environment
- Verify all 6 prices created in Stripe dashboard
- Confirm database updated with correct price IDs
- Test subscription creation with new prices

### 2. Endpoint Testing
- Test endpoint with admin credentials
- Verify proper authorization requirements
- Confirm price creation in Stripe dashboard
- Check database updates

### 3. Error Scenario Testing
- Test with invalid Stripe credentials
- Test duplicate price creation attempts
- Test database connection failures
- Verify proper error messages

## DELIVERABLES

### 1. Implementation
- Complete script or endpoint code
- Database update logic
- Error handling implementation
- Security measures

### 2. Testing Evidence
- Execution logs showing successful price creation
- Stripe dashboard screenshots of created prices
- Database records verification
- Subscription flow test results

### 3. Documentation
- Usage instructions for script or endpoint
- Troubleshooting guide
- Security considerations
- Rollback procedures if needed

## PRODUCTION REQUIREMENTS
**Every feature must use exclusively live production data. Any component using mock, demo, or hardcoded data will be rejected.**

## IMPLEMENTATION PRIORITY
1. **Critical (Immediate):** Implement Stripe price creation solution
2. **High (2-4 hours):** Test complete subscription flow
3. **Medium (4-6 hours):** Documentation and verification

## SUCCESS CRITERIA
- All 6 Stripe prices created via API
- Database updated with correct price IDs
- Subscription creation works with new prices
- Complete user flow functional end-to-end
- No manual intervention required

Please confirm receipt and provide a detailed implementation plan for creating Stripe prices via API, including your preferred approach (script or endpoint) and timeline for completion.