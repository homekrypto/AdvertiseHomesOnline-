

# PROMPT: COMPREHENSIVE EMAIL SENDING SYSTEM ANALYSIS

## OBJECTIVE
Diagnose and resolve the email verification delivery failure. Take a systematic approach to test every component of the email sending pipeline - database, backend, API, and email service - to identify why verification emails are not being received and resend verification is failing with 400 errors.

## CURRENT ISSUES
- Verification emails not received during registration
- Resend verification endpoint returning 400 Bad Request
- Error: `POST https://1541423f-ccc2-4fb1-9f6a-966ef0962324-00-2jmf8gk04wb3v.riker.replit.dev/api/auth/resend-verification 400 (Bad Request)`

## SYSTEMATIC ANALYSIS APPROACH

### 1. DATABASE CONNECTION & VERIFICATION CODE STORAGE
**Testing Required:**
- Verify database connection for verification codes table
- Test verification code generation and storage
- Check if codes are properly stored with expiration timestamps
- Validate database relationships between users and verification codes

**Deliverables:**
- Database connection test results
- Sample verification code records from production database
- SQL queries used for testing
- Confirmation of proper table relationships

### 2. EMAIL SERVICE CONFIGURATION (SMTP)
**Testing Required:**
- Test SMTP connection independently using production credentials
- Verify email server settings (host, port, authentication)
- Test email sending without application involvement
- Check for email service provider restrictions or blocks
- Verify DNS settings (SPF, DKIM, DMARC) if applicable

**Deliverables:**
- SMTP connection test results
- Independent email sending test logs
- Email service provider configuration verification
- DNS records check results

### 3. BACKEND ENDPOINT ANALYSIS
**Testing Required:**
- `/api/auth/register` endpoint:
  - Verify request payload validation
  - Check verification code generation logic
  - Test email sending function call
  - Examine error handling and logging
- `/api/auth/resend-verification` endpoint:
  - Identify cause of 400 Bad Request
  - Check request body format requirements
  - Verify user lookup logic
  - Test new code generation and storage

**Deliverables:**
- Endpoint request/response analysis
- Code flow documentation
- Error logs and stack traces
- Payload validation requirements

### 4. API REQUEST HANDLING
**Testing Required:**
- Test API endpoints using Postman/curl
- Verify request headers and content types
- Check authentication requirements
- Test with different request formats
- Analyze response error messages

**Deliverables:**
- Postman/curl test results
- Request/response examples
- Authentication test results
- Error message analysis

### 5. EMAIL TEMPLATE & CONTENT
**Testing Required:**
- Verify email template includes verification code
- Test email content generation
- Check email subject and sender configuration
- Test HTML vs plain text versions
- Verify email rendering in different clients

**Deliverables:**
- Email template verification results
- Sample generated email content
- Rendering test results

## COMPREHENSIVE TESTING PLAN

### Phase 1: Database Testing (Immediate)
```bash
# Test database connection
psql $DATABASE_URL -c "SELECT 1;"

# Test verification codes table
psql $DATABASE_URL -c "\d verificationCodes;"

# Test user-verification relationship
psql $DATABASE_URL -c "SELECT u.email, vc.code, vc.expiresAt FROM users u JOIN verificationCodes vc ON u.id = vc.userId LIMIT 5;"

# Test code generation
psql $DATABASE_URL -c "INSERT INTO verificationCodes (userId, code, expiresAt) VALUES (1, 'TEST123', NOW() + INTERVAL '24 hours');"
```

### Phase 2: Email Service Testing (Immediate)
```javascript
// Independent email test script
const nodemailer = require('nodemailer');

const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST,
  port: process.env.SMTP_PORT,
  secure: true,
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS
  }
});

transporter.sendMail({
  from: process.env.SMTP_FROM,
  to: 'test-email@example.com',
  subject: 'Test Verification Email',
  text: 'Your verification code is: TEST123'
}).then(info => {
  console.log('Email sent:', info);
}).catch(error => {
  console.error('Email failed:', error);
});
```

### Phase 3: Backend Endpoint Testing (1-2 hours)
```bash
# Test registration endpoint
curl -X POST https://your-domain.com/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{"email":"test@example.com","password":"test123","tier":"free","billingInterval":"monthly"}'

# Test resend verification endpoint
curl -X POST https://your-domain.com/api/auth/resend-verification \
  -H "Content-Type: application/json" \
  -d '{"email":"test@example.com"}'
```

### Phase 4: Frontend API Testing (1-2 hours)
- Use browser DevTools to monitor network requests
- Test registration flow with different email providers
- Check request payloads and response headers
- Verify error handling in frontend code

### Phase 5: End-to-End Testing (2-3 hours)
- Complete registration flow with test user
- Check database for verification code
- Monitor email service logs
- Verify email delivery
- Test resend functionality

## DELIVERABLES REQUIRED

### 1. Diagnostic Report
- Detailed analysis of each system component
- Identification of failure points
- Root cause determination
- Evidence from production systems

### 2. Test Results
- Database connection and query results
- Email service test logs
- API endpoint test responses
- Frontend network request logs

### 3. Code Analysis
- Backend endpoint code review
- Email sending function analysis
- Request validation logic
- Error handling assessment

### 4. Configuration Verification
- SMTP settings confirmation
- Environment variables validation
- Database schema verification
- Email service provider status

### 5. Resolution Plan
- Specific fixes needed
- Implementation priority
- Testing verification steps
- Timeline for resolution

## PRODUCTION REQUIREMENTS
- **Live Data Only**: All tests must use production databases and services
- **No Mock Data**: Use real email addresses and production credentials
- **Production Verification**: Provide evidence from actual production systems
- **Real Testing**: Test with actual email delivery, not just simulation

## IMPLEMENTATION PRIORITY
1. **Critical (Immediate)**: Database connection test, independent email service test
2. **High (2-4 hours)**: Backend endpoint analysis, API request testing
3. **Medium (4-6 hours)**: Frontend testing, end-to-end verification
4. **Low (6-8 hours)**: Comprehensive report and resolution plan

## SUCCESS CRITERIA
- Identify the exact cause of email delivery failure
- Resolve the 400 Bad Request error for resend verification
- Provide working email verification system using production data
- Deliver comprehensive diagnostic report with evidence

Please confirm receipt and provide a detailed plan for executing this systematic analysis, including specific tools and methods you'll use for each test phase.